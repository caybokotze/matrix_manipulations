using System;

namespace MatrixMultiplications
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
            var matrix = MatrixCalculations.Create3DMatrix(
                (0,0,0,1.42), 
                (0,2,0,1.42), 
                (2,2,0,1.42), 
                (2,0,0,1.42));
            //
            var coordinate = MatrixCalculations.CalculateCoordinate(matrix);
            Console.WriteLine($"X: {Math.Round(coordinate.X, 2)} Y: {Math.Round(coordinate.Y, 2)} Z: {Math.Round(coordinate.Z, 2)}");
            //Console.ReadLine();
        }
    }

    class MatrixCalculations
    {
        public static double[,] Create3DMatrix(
            (double x, double y, double z, double beaconDistance) gatewayA, 
            (double x, double y, double z, double beaconDistance) gatewayB, 
            (double x, double y, double z, double beaconDistance) gatewayC,
            (double x, double y, double z, double beaconDistance) gatewayD)
        {
            return new double[,]
            {
                { gatewayA.x, gatewayA.y, gatewayA.z, gatewayA.beaconDistance }, //Gateway A
                { gatewayB.x, gatewayB.y, gatewayB.z, gatewayB.beaconDistance }, //Gateway B
                { gatewayC.x, gatewayC.y, gatewayC.z, gatewayC.beaconDistance }, //Gateway C
                { gatewayD.x, gatewayD.y, gatewayD.z, gatewayD.beaconDistance }
            };
        }
        //
        public static Coordinate CalculateCoordinate(double[,] gatewayMatrix)
        {
            var initialMatrix = MultiplyGatewayCoordinatesByTwo(gatewayMatrix);
            var coefficientMatrix = CoefficientDeterminant(initialMatrix);
            var detA = CalculateDeterminantA(initialMatrix);
            var inverseMatrix = AInverseMatrix(coefficientMatrix, CalculateDeterminantA(initialMatrix));
            
            double[] kValues = new double[4];
            kValues[0] = AddAndSquare(gatewayMatrix[0, 0], gatewayMatrix[0, 1], gatewayMatrix[0, 2]);
            kValues[1] = AddAndSquare(gatewayMatrix[1, 0], gatewayMatrix[1, 1], gatewayMatrix[1, 2]);
            kValues[2] = AddAndSquare(gatewayMatrix[2, 0], gatewayMatrix[2, 1], gatewayMatrix[2, 2]);
            kValues[3] = AddAndSquare(gatewayMatrix[3, 0], gatewayMatrix[3, 1], gatewayMatrix[3, 2]);
            //
            var bOne = SubtractAndSquare(gatewayMatrix[0, 2], gatewayMatrix[1, 2]) - kValues[0] + kValues[1];
            var bTwo = SubtractAndSquare(gatewayMatrix[0, 2], gatewayMatrix[2, 2]) - kValues[0] + kValues[2];
            var bThree = SubtractAndSquare(gatewayMatrix[0, 2], gatewayMatrix[3, 2]) - kValues[0] + kValues[3];
            //
            var XY = MultiplyBIntoMatrix(inverseMatrix, bOne, bTwo, bThree);
            //
            Coordinate coordinate = new Coordinate(XY[0,0], XY[0,1], XY[0,2]);
            return coordinate;
        }
        
        
        
        public static double[,] CoefficientDeterminant(double[,] matrix)
        {
            double[,] coefficientMatrix = new double[3,3];
            //
            coefficientMatrix[0, 0] = CalculateDeterminant(matrix[1, 1], matrix[1, 2], matrix[2, 1], matrix[2, 2]);
            coefficientMatrix[0, 1] = CalculateDeterminant(matrix[1, 0], matrix[1, 2], matrix[2, 0], matrix[2, 2]);
            coefficientMatrix[0, 2] = CalculateDeterminant(matrix[1, 0], matrix[1, 1], matrix[2, 0], matrix[2, 1]);
            coefficientMatrix[1, 0] = CalculateDeterminant(matrix[0, 1], matrix[0, 2], matrix[2, 1], matrix[2, 2]);
            coefficientMatrix[1, 1] = CalculateDeterminant(matrix[0, 0], matrix[0, 2], matrix[2, 0], matrix[2, 2]);
            coefficientMatrix[1, 2] = CalculateDeterminant(matrix[0, 0], matrix[0, 1], matrix[2, 0], matrix[2, 1]);
            coefficientMatrix[2, 0] = CalculateDeterminant(matrix[0, 1], matrix[0, 2], matrix[1, 1], matrix[1, 2]);
            coefficientMatrix[2, 1] = CalculateDeterminant(matrix[0, 0], matrix[0, 2], matrix[1, 0], matrix[1, 2]);
            coefficientMatrix[2, 2] = CalculateDeterminant(matrix[0, 0], matrix[0, 1], matrix[1, 0], matrix[1, 1]);
            //
            return coefficientMatrix;
        }

        private static double[,] MultiplyGatewayCoordinatesByTwo(double[,] gatewayMatrix)
        {
            double[,] matrixOutput = new double[3, 3];
            matrixOutput[0, 0] = DoubleAndSubtract(gatewayMatrix[1, 0], gatewayMatrix[0, 0]);
            matrixOutput[0, 1] = DoubleAndSubtract(gatewayMatrix[1, 1], gatewayMatrix[0, 1]);
            matrixOutput[0, 2] = DoubleAndSubtract(gatewayMatrix[1, 2], gatewayMatrix[0, 2]);
            //
            matrixOutput[1, 0] = DoubleAndSubtract(gatewayMatrix[2, 0], gatewayMatrix[0, 0]);
            matrixOutput[1, 1] = DoubleAndSubtract(gatewayMatrix[2, 1], gatewayMatrix[0, 1]);
            matrixOutput[1, 2] = DoubleAndSubtract(gatewayMatrix[2, 2], gatewayMatrix[0, 2]);
            //
            matrixOutput[2, 0] = DoubleAndSubtract(gatewayMatrix[3, 0], gatewayMatrix[0, 0]);
            matrixOutput[2, 1] = DoubleAndSubtract(gatewayMatrix[3, 1], gatewayMatrix[0, 1]);
            matrixOutput[2, 2] = DoubleAndSubtract(gatewayMatrix[3, 2], gatewayMatrix[0, 2]);
            return matrixOutput;
        }
        

        private static double[,] MultiplyBIntoMatrix(double[,] matrix, double b1, double b2, double b3)
        {
            var x = matrix[0, 0] * b1 + matrix[0, 1] * b2 + matrix[0, 2] * b3;
            var y = matrix[1, 0] * b1 + matrix[1, 1] * b2 + matrix[1, 2] * b3;
            var z = matrix[2, 0] * b1 + matrix[2, 1] * b2 + matrix[2, 2] * b3;
            //
            return new double[,] {{x, y, z}};
        }

        private static double[,] CalculateMatrixInverseDeterminants(double determinant, double[,] matrix)
        {
            var inverse = 1 / determinant;
            var returnMatrix = new double[2, 2];
            //
            returnMatrix[0, 0] = matrix[0, 0] * inverse;
            returnMatrix[0, 1] = matrix[0, 1] * inverse;
            returnMatrix[1, 0] = matrix[1, 0] * inverse;
            returnMatrix[1, 1] = matrix[1, 1] * inverse;

            return returnMatrix;
        }

        private static double[,] AInverseMatrix(double [,] matrix, double detA)
        {
            if (detA == 0)
            {
                throw new ArithmeticException();   
            }
            //
            matrix[0, 0] = 1 / detA * matrix[0, 0];
            matrix[0, 1] = 1 / detA * matrix[0, 1];
            matrix[0, 2] = 1 / detA * matrix[0, 2];
            matrix[1, 0] = 1 / detA * matrix[1, 0];
            matrix[1, 1] = 1 / detA * matrix[1, 1];
            matrix[1, 2] = 1 / detA * matrix[1, 2];
            matrix[2, 0] = 1 / detA * matrix[2, 0];
            matrix[2, 1] = 1 / detA * matrix[2, 1];
            matrix[2, 2] = 1 / detA * matrix[2, 2];
            //
            return matrix;
        }

        private static double CalculateDeterminantA(double[,] matrix)
        {
            return 
                matrix[0, 0] * 
                CalculateDeterminant(matrix[1,1], matrix[1,2], matrix[2,1], matrix[2,2]) -
                matrix[0,1] * 
                CalculateDeterminant(matrix[1, 0], matrix[1,2], matrix[2,0], matrix[2,2]) +
                matrix[0,2] *
                CalculateDeterminant(matrix[1,0], matrix[1,1], matrix[2,0], matrix[2,1]);
        }
        
        private static double CalculateDeterminant(double a, double b, double c, double d)
        {
            return ((a * d) - (c * b));
        }

        private static double SubtractAndSquare(double value1, double value2)
        {
            return Math.Pow(value1, 2) - Math.Pow(value2, 2);
        }

        private static double AddAndSquare(double x, double y, double z)
        {
            return Math.Pow(x, 2) + Math.Pow(y, 2) + Math.Pow(z, 2);
        }
        
        private static double DoubleAndSubtract(double value, double subtract)
        {
            return 2 * (value - subtract);
        }
    }

    class GatewayCoordinates
    {
        public GatewayCoordinates(Coordinate[] gateways)
        {
            this._gateways = gateways;
        }
        //
        private Coordinate[] _gateways;
        //
        public Coordinate[] GetGatewayCoordinates()
        {
            return _gateways;
        }
    }

    class Coordinate
    {
        public Coordinate(double x, double y, double z)
        {
            this.X = x;
            this.Y = y;
            this.Z = z;
        }
        public double X { get; set; }
        public double Y { get; set; }
        public double Z { get; set; }
    }
}